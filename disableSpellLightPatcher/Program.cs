
using System;
using System.Collections.Generic;
using System.Data;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using DynamicData.Kernel;
using Mutagen.Bethesda;
using Mutagen.Bethesda.FormKeys.SkyrimSE;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Synthesis;
using Noggog;
using System.Text.RegularExpressions;
using System.Reflection;
using System.Reflection.Metadata;
using CommandLine;
using System.Linq;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Skyrim;
using ScriptProperty = Mutagen.Bethesda.Skyrim.ScriptProperty;
using VirtualMachineAdapter = Mutagen.Bethesda.Skyrim.VirtualMachineAdapter;
using IQuest = Mutagen.Bethesda.Skyrim.IQuest;
using System.Collections;
using DynamicData;
using Newtonsoft.Json;


// Function to initialize the matches dictionary with all keys set to 0


namespace disableSpellLightPatcher;

public class Program
{
    private static Lazy<Settings> formSettings = null!;

    public static Task<int> Main(string[] args)
    {
        return SynthesisPipeline.Instance
            .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
            .SetAutogeneratedSettings(
                "Settings",
                "Settings.json",
                out formSettings)
            .SetTypicalOpen(GameRelease.SkyrimSE, "disableSpellLightPatcher.esp")
            .Run(args);
    }
    
    public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
    {

        foreach (var spelll in state.LoadOrder.PriorityOrder.Spell().WinningOverrides())
        {
            try
            {
                if (spelll.HalfCostPerk == null)
                {
                    continue;
                }
                bool isPlayerSpell = false;
                IFormLinkGetter<IPerkGetter> halfPerk = spelll.HalfCostPerk;
                var halfPerkGetter = halfPerk.Resolve(state.LinkCache);
                if (halfPerkGetter.EditorID != null &&
                 halfPerkGetter.EditorID.IndexOf("Alteration", StringComparison.OrdinalIgnoreCase) >= 0)
                {
                    if (formSettings.Value.AltOn == false)
                    {
                        continue;
                    }
                    isPlayerSpell = true;
                }
                if (halfPerkGetter.EditorID != null &&
                 halfPerkGetter.EditorID.IndexOf("Conjuration", StringComparison.OrdinalIgnoreCase) >= 0)
                {
                    if (formSettings.Value.ConjOn == false)
                    {
                        continue;
                    }
                    isPlayerSpell = true;
                }
                if (halfPerkGetter.EditorID != null &&
                 halfPerkGetter.EditorID.IndexOf("Destruction", StringComparison.OrdinalIgnoreCase) >= 0)
                {
                    if (formSettings.Value.DestOn == false)
                    {
                        continue;
                    }
                    isPlayerSpell = true;
                }
                if (halfPerkGetter.EditorID != null &&
               halfPerkGetter.EditorID.IndexOf("Illusion", StringComparison.OrdinalIgnoreCase) >= 0)
                {
                    if (formSettings.Value.IllOn == false)
                    {
                        continue;
                    }
                    isPlayerSpell = true;
                }
                if (halfPerkGetter.EditorID != null &&
              halfPerkGetter.EditorID.IndexOf("Restoration", StringComparison.OrdinalIgnoreCase) >= 0)
                {
                    if (formSettings.Value.RestOn == false)
                    {
                        continue;
                    }
                    isPlayerSpell = true;
                }

                if (isPlayerSpell == true)
                {
                    foreach (var effectInSpell in spelll.Effects)
                    {
                        IFormLinkGetter<IMagicEffectGetter> magEffect = effectInSpell!.BaseEffect;
                        var magEffectGetter = magEffect.Resolve(state.LinkCache);
                        IFormLinkGetter<ILightGetter> magicLink = magEffectGetter.CastingLight;
                        var lightGetter = magicLink.Resolve(state.LinkCache);
                        var modifedLight = state.PatchMod.Lights.GetOrAddAsOverride(lightGetter);
                        modifedLight.Flags = Light.Flag.PortalStrict;
                        modifedLight.Radius = 0;
                        modifedLight.FadeValue = 0;
                        modifedLight.NearClip = 0;

                    }

                }
            }
            catch
            {

            }
        

        }




    }
}
